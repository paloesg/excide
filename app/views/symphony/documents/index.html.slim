.row.mb-3
  .col-sm-12
    h1 Document Repository
- if @get_documents.blank?
  .row.justify-content-center
    = render "empty_documents"
- else
  .row
    .col-sm-6.mb-3
      input.form-control#q type="search"
    .col-sm-3.offset-sm-3
      .btn-toolbar.float-right
        = link_to '+ Upload Document', new_symphony_document_path, role: 'button', class: 'btn btn-primary mr-1'
  = form_tag symphony_batches_path(source: 'email'), method: :post do
    .row
      .card-body
        .table-responsive#hits
        #pagination
        #facets
          #document_templates
          .row.create-batch-through-documents.d-none
            .form-inline.mb-3.flex-grow-1.justify-content-end
              .form-group
                // Overwrite ID so that it won't clash with uppy upload that checks for template slug
                = select_tag('template_slug', options_for_select(@templates.map {|k,v| [k.title, k.slug] }), include_blank: 'Select template', required: true, id: 'template', class: 'select2 mt-1 form-control')
              .form-group.ml-2
                = submit_tag 'Create Batch', class: 'btn btn-primary'

javascript:
  function loadExtJS(src, callback) {
    var s = document.createElement('script');
    s.src = src;
    document.body.appendChild(s);
    s.onload = callback
  }

  loadExtJS('//cdn.jsdelivr.net/instantsearch.js/1/instantsearch.min.js', function(){
    var hitTemplate = '<table class="table">' +
        '<thead><tr><th></th>' +
        '<th></th>' +
        '<th>Filename</th>' +
        '<th>Document Template</th>' +
        '<th>Uploaded For</th>' +
        '<th>Uploaded On</th>' +
        '<th>Actions</th>' +
        '</tr></thead>' +
        '<tbody>{{#hits}}' +
        '<tr><td><input type="checkbox" name="tag_ids[]" value={{{objectID}}} class="create-batch" /></td>' +
        '<td>{{#_tags}}<i class="far fa-envelope"></i>{{/_tags}}</td>' +
        '<td>{{{_highlightResult.filename.value}}}</td>' +
        '<td>{{{_highlightResult.document_template.title.value}}}</td>' +
        '<td><a href="/symphony/{{workflow.template_slug}}/{{workflow.id}}">{{{_highlightResult.workflow.template_title.value}}}</td>' +
        '<td>{{created_at}}</td>' +
        '<td><div class="dropdown dropdown-inline"> <a href="#" aria-expanded="false" aria-haspopup="true" data-toggle="dropdown" class="btn btn-icon btn-link btn-xs fa fa-ellipsis-h"></a> <div class="dropdown-menu dropdown-menu-right"> <a class="dropdown-item" href="/symphony/documents/{{objectID}}">View</a> <a class="dropdown-item" href="{{file_url}}">Download</a> <a class="dropdown-item" data-confirm="Are you sure?" data-method="delete" data-remote="true" href="/symphony/documents/{{objectID}}">Delete</a> </div></div></td>' +
        '{{/hits}}</tbody>'
      '</div>';
      var search = instantsearch({
        appId: '#{ENV['ALGOLIASEARCH_APPLICATION_ID']}',
        apiKey: '#{@public_key}',
        indexName: '#{Document.index_name}',
        urlSync: true
      });
      search.addWidget(
        instantsearch.widgets.searchBox({
          container: '#q',
          placeholder: 'Search for documents',
          autofocus: false
        })
      );
      search.addWidget(
        instantsearch.widgets.hits({
          container: '#hits',
          transformData: {
            allItems: function(data) {
              $(data['hits']).each(function(index) {
                data['hits'][index].created_at = moment(this.created_at).format("DD/MM/YYYY HH:mm")
              })
              return data;
            }
          },
          templates: {
            empty: '<table class="table"><tr><td>No matching documents found.</td></tr></table>',
            allItems: hitTemplate
          },
          hitsPerPage: 10
        })
      );
      search.addWidget(
        instantsearch.widgets.refinementList({
          container: '#document_templates',
          attributeName: 'document_template.title',
          limit: 10,
          templates: {
            header: '<h3 class="card-header">Document Templates</h3>'
          },
          cssClasses: {
            root: 'card',
            body: 'list-group list-group-flush',
            item: 'list-group-item',
            count: 'badge badge-pill badge-secondary'
          }
        })
      );
      search.addWidget(
        instantsearch.widgets.pagination({
          container: '#pagination',
          cssClasses: {
            active: 'active',
          },
          labels: {
            first: '<i class="fa fa-angle-left"></i> First',
            previous: '<i class="fa fa-angle-left"></i> Previous',
            next: 'Next <i class="fa fa-angle-right"></i>',
            last: 'Last <i class="fa fa-angle-double-right"></i>',
          },
          autoHideContainer: false,
        })
      );
      search.start();
  })
