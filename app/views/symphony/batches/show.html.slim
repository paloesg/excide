.row.mb-3
  .col
    h1 Batch #{@batch.name}
.row
  .col-xl-12
    - @batch.template.sections.each do |section|
      .card
        h3.card-header.d-flex.justify-content-between
          | #{section.section_name} - #{section.tasks.count.to_s} tasks
          .card-toolbar
            - if @batch.processing_complete?
              small #{@completed} of #{@batch.workflows.count} #{'file'.pluralize(@batch.workflows.count)} completed
            - elsif @document_count.present?
              small #{@document_count} of #{@batch.workflows.count} #{'file'.pluralize(@batch.workflows.count)} completed
            - else
              small Processing #{@processing_files} #{'file'.pluralize(@processing_files)} at the moment. You may start on your tasks first.
          / Check if any files failed during processing (eg document not created, hence no attachment)
          - if @batch.failed_blob['blobs'].present?
            a.pop.ml-2 data-container="body" title="" data-original-title="#{pluralize(@batch.failed_blob['blobs'].length, 'file')} failed to be processed. Please contact admin for support." data-html="true" data-placement="top" data-toggle="tooltip" data-trigger="hover"
              i.fa.fa-exclamation-triangle.text-danger
        .card-body
          .kt-widget11
            .table-responsive
              table.table
                thead
                  tr
                    th Filename
                    th
                    - section.tasks.includes(:role).order(position: :asc).each do |task|
                      th
                        .header-properties
                          ' #{task.task_type.humanize}
                          a.pop data-container="body" title=task.instructions data-html="true" data-placement="right" data-toggle="tooltip" data-trigger="hover"
                            i.fa.fa-info-circle
                        .header-info
                          ' #{task.role.name.humanize}
                tbody
                  - @per_batch.each do |wf|
                    tr
                      / Only show the processing buttons and line when workflow_actions are created
                      - if wf.documents.empty? and wf.workflow_actions.present?
                        td
                          / i.ti-file.icon.mr-3.text-center.large-icon.gray-icon
                          | Document is still processing
                        td
                          .btn-group.btn-group-sm
                            button class="btn btn-secondary flaticon2-search-1" disabled="" 
                            button class="btn btn-secondary flaticon2-paper" disabled=""
                            button class="btn btn-secondary flaticon2-rubbish-bin text-danger" disabled="" 
                      - else
                        - wf.documents.each do |d|
                          td.align-middle
                            / Check if raw file is attached. If it's not (like the older documents), display the filename instead
                            - if d.raw_file.attached?
                              = d.raw_file.filename
                            - else
                              = d.filename
                          td
                            .btn-group.btn-group-sm
                              - if d.converted_images.attached?
                                / To prevent getting error message, check if converted image is attached before displaying. This is because activejob might take longer to convert than rails creating the batches.
                                - display_url = url_for(d.converted_images.first)
                              - elsif d.raw_file.attached? && d.raw_file.content_type != "application/pdf"
                                / check for content_type as pdf also have raw_file
                                - display_url = url_for(d.raw_file)
                              - elsif d.file_url.present?
                                - display_url = d.file_url
                              - else
                                - display_url = nil
                              - if display_url.present?
                                a data-container="body" data-toggle="popover" tabindex="0" data-trigger="focus" data-html="true" data-content="<img src='#{display_url}' class='img-fluid'/>" class="btn btn-secondary flaticon2-search-1"
                              - else
                                button class="btn btn-secondary flaticon2-search-1 disabled" data-html="true" data-toggle="tooltip" data-placement="top" title="No preview available"
                              - if wf.invoice.blank?
                                button class="btn btn-secondary flaticon2-paper disabled" data-html="true" data-toggle="tooltip" data-placement="top" title="No invoice available"
                              - else
                                = link_to "", symphony_invoice_path(workflow_name: wf.template.slug, workflow_id: wf.friendly_id, id: wf.invoice.id), data: { toggle: "tooltip", placement: "top", title: "View invoice" }, class: 'btn btn-secondary flaticon2-paper' 
                              = link_to "", symphony_workflow_path(workflow_name: wf.template.slug, workflow_id: wf.id), method: :delete, data: { toggle: "tooltip", placement: "top", title: "Delete", confirm: 'Are you sure?' }, remote: true, role: 'button', remote: true, class: 'btn btn-secondary flaticon2-rubbish-bin text-danger'
                              - if wf.invoice.present? and wf.invoice.rejected?
                                button class="btn btn-light flaticon2-warning disabled text-danger" data-html="true" data-toggle="tooltip" data-placement="top" title="Invoice rejected: #{wf.invoice.remarks}"
                      - section.tasks.includes(:role).order(position: :asc).each do |task|
                        td class="text-center #{'important-task' if task.important}"
                          = render "symphony/batches/tasks/#{task.task_type}", workflow: wf, action: task.get_workflow_action(wf.company, wf.id) if task.get_workflow_action(wf.company, wf.id).present?
              = paginate @per_batch, views_prefix: 'dashboard'
