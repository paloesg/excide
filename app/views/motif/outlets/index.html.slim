.m-5
  .row.my-5
    .col-sm-4.d-flex.align-items-center
      i.material-icons-outlined.mr-5.text-dark store_mall_directory
      .header-font.text-dark.mr-3 Outlet List
      button.close.open-banner.text-dark.mr-3 type="submit"
        i.material-icons-outlined.float-right help_outline
  = render 'motif/home/banners/outlet_list'
  .row.mt-5
    .col-sm-12
      - if current_user.has_role? :superadmin
        button.btn.btn-primary.text-white.float-right.ml-5 data-target="#newMotifOutlet" data-toggle="modal" type="button"
          i.material-icons-outlined.text-white add
          | Register New Outlet
        #newMotifOutlet.modal.fade aria-hidden="true" aria-labelledby="openMotifOutlet" role="dialog" tabindex="-1"
          .modal-dialog role="document"
            .modal-content
              .modal-header
                h5#openMotifOutlet.modal-title Register New Outlet
              .modal-body
                = form_for(@outlet, url: motif_outlets_path, html: { method: :post }) do |f|
                  .row.mt-3
                    .col-md-12
                      .form-group
                        = f.text_field :name, placeholder: 'Create Outlet Name', class: 'form-control'
                      hr
                      h6 Add New Member
                      .form-group
                        = email_field_tag :user_email, nil, placeholder: "Add user's email...", class: 'form-control'
                      .form-group
                        = text_field_tag :first_name, nil, placeholder: "Add user's first name...", class: 'form-control'
                      .form-group
                        = text_field_tag :last_name, nil, placeholder: "Add user's last name...", class: 'form-control'
                      h6 Choose Existing Member
                      .form-group
                        = select_tag('user_id', options_from_collection_for_select(@existing_users, "id", "email"), include_blank: true, class: "form-control", style: 'width: 100%')
                  .row.mt-3
                    .col-md-12
                      = f.submit "Save", class: 'btn btn-sm btn-primary float-right ml-3'
                      button.btn.btn-sm.btn-secondary.float-right data-dismiss="modal" type="button"  Close
      - else
        button.btn.btn-primary.text-white.float-right.ml-5 data-target="#newOutletDetails" data-toggle="modal" type="button"
          i.material-icons-outlined.text-white add
          | Request New Outlet
        #newOutletDetails.modal.fade aria-hidden="true" aria-labelledby="openNewOutletForm" role="dialog" tabindex="-1"
          .modal-dialog role="document"
            .modal-content
              .modal-header
                h5#openNewOutletForm.modal-title Request for new outlet
              .modal-body
                = form_tag motif_email_new_outlet_path do |f|
                  .row.mt-3
                    .col-md-12
                      .form-group
                        = text_field_tag :unit_name, nil, { required: true, placeholder: "Outlet Name", class: 'form-control' }
                      .form-group
                        = text_field_tag :full_name, nil, { required: true, placeholder: "Enter person in charge's full name ", class: 'form-control' }
                      .form-group
                        = text_field_tag :email, nil, { required: true, placeholder: "Enter person in charge's email ", class: 'form-control' }
                      .form-check
                        = check_box_tag :request_approved, nil, false, class: 'form-check-input'
                        = label_tag :request_approved, "Request approved by franchisor", class: "ml-2 mt-1"
                  .row.mt-3
                    .col-md-12
                      = submit_tag "Save", class: 'btn btn-sm btn-primary float-right ml-3'
                      button.btn.btn-sm.btn-secondary.float-right data-dismiss="modal" type="button"  Close
      = link_to 'Franchised', motif_outlets_path(type: "franchised"), type: 'button', class: 'motif-filter-outlet text-dark mr-2'
      = link_to 'Direct owned', motif_outlets_path(type: "direct-owned"), type: 'button', class: ' motif-filter-outlet text-dark mr-2'
      = link_to 'All', motif_outlets_path, type: 'button', class: ' motif-filter-outlet text-dark'
      #search-element.float-right
        div.form-row.align-items-center
          span.mr-3
            i.material-icons-outlined.align-middle search
          input.form-control.border-0.col#q type="search" placeholder="Search Outlets..."
  hr.mb-0
  = render 'card_view'

javascript:
  function loadExtJS(src, callback) {
    var s = document.createElement('script');
    s.src = src;
    document.body.appendChild(s);
    s.onload = callback
  }
  loadExtJS('//cdn.jsdelivr.net/instantsearch.js/1/instantsearch.min.js', function(){
    var hitTemplate = '<div class="col-sm-4 mt-5"><div class="d-flex py-1"><img class="outlet-image mr-5" src="{{header_image_src}}"><div class="my-lg-0 my-2 pr-3"><a class="h4 font-weight-boldest text-dark" href="{{url}}">{{{_highlightResult.name.value}}}</a><div class="h6 mt-2">{{{_highlightResult.franchisee_licensee.value}}}</div>{{{_highlightResult.country.value}}}<br><div class="badge label-motif-roles">{{{_highlightResult.label.value}}}</div></div></div></div>';

    var search = instantsearch({
      appId: '#{ENV['ALGOLIASEARCH_APPLICATION_ID']}',
      apiKey: '#{@public_key}',
      indexName: '#{Outlet.index_name}',
      urlSync: true,
      // Only display the search results when there's query in the searchbox
      searchFunction(helper) {
        const container = document.querySelector('#hits');
        container.style.display = helper.state.query === '' ? 'none' : '';
        helper.search();
      }
    });

    search.addWidget(
      instantsearch.widgets.searchBox({
        container: '#q',
        placeholder: 'Search...',
        autofocus: false,
        cssClasses: {
          root: 'flex-fill'
        }
      })
    );

    search.addWidget(
      instantsearch.widgets.hits({
        container: '#hits',
        transformData: {
          allItems: function(data) {
            $(data['hits']).each(function(index) {
              data['hits'][index].created_at = moment(this.created_at).format("DD/MM/YYYY HH:mm")
            })
            return data;
          }
        },
        templates: {
          empty: '<table class="table"><tr><td>No matching documents found.</td></tr></table>',
          allItems: hitTemplate
        },
        hitsPerPage: 10
      })
    );

    search.addWidget(
      instantsearch.widgets.pagination({
        container: '#pagination',
        cssClasses: {
          active: 'active',
          list: 'pagination',
          item: 'page-item',
          disabled: 'd-none',
          link: 'page-link'
        },
        labels: {
          first: '<i class="fa fa-angle-double-left fa-w-8"></i>',
          previous: '<i class="fa fa-angle-left fa-w-8"></i>',
          next: '<i class="fa fa-angle-right fa-w-8"></i>',
          last: '<i class="fa fa-angle-double-right fa-w-8"></i>'
        },
        autoHideContainer: false,
      })
    );

    search.start();

    // This method checks if the user searched for the documents. If searching, then hide the existing HTML element (#nonSearchResult) and display the search result, vice versa.
    search.helper.on('result', function(res) {
      const nonSearchResult = document.querySelector('#nonSearchResult');
      const algolia_pagination = document.querySelector('#pagination');
      const pagination = document.querySelector('#pagination-non-search');
      if (res && res.hits && res.query == "") {
        // Show the existing table when query is blank
        nonSearchResult.classList.remove("d-none");
        // Hide pagination when query is blank
        algolia_pagination.classList.add("d-none");
        pagination.classList.remove("d-none");
      } else {
        // Hide existing table when user is searching
        nonSearchResult.classList.add("d-none");
        // Display pagination only when more than 1 page of search results are displayed
        if (res.nbPages > 1) algolia_pagination.classList.remove("d-none");
        pagination.classList.add("d-none");
      }
    });
  })

